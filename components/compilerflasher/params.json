{"name":"Compilerflasher","tagline":"Documentation for cf","body":"# codebender compilerflasher\r\n\r\n\r\ncodebender compilerflasher is a javascript library that enables compiling Arduino sketches, and flashing the binaries to Arduino & Arduino compatible devices through the browser using the codebender.cc plugin for Chrome & Firefox.\r\n\r\n## Getting Started\r\n\r\nTo use the script, just including the following line of code:\r\n\r\n`<script src=\"https://codebender.cc/embed/compilerflasher.js\" type=\"text/javascript\"></script>`\r\n\r\n## Dependencies\r\n\r\ncompilerflasher needs jQuery to operate as it should. Also, if you want the select fields described later, to load up with the previously selected option you can also include Lawnchair.\r\n\r\n## HTML Elements\r\n\r\nOn the app using compilerflasher.js, you can add any of the following elements:\r\n\r\n`<select id=\"cb_cf_boards\"></select>`\r\n\r\nA selection of supported Arduino & Arduino compatible boards. The currently supported boards can be found here.\r\n\r\n`<button id=\"cb_cf_verify_btn\" ></button>`\r\n\r\nA button that compiles the source code provided to compilerflahser (see Javascript section).\r\n\r\n`<select id=\"cb_cf_ports\"></select>`\r\n\r\nA selection of currently available ports. The ports are indentified by the aformentioned browser plugin.\r\n\r\n`<button id=\"cb_cf_flash_btn\"></button>`\r\n\r\nA button that first compiles the code, and then uploads the binary of the source code, on the Arduino device connected on the selected port of “cb_cf_ports”.\r\n\r\n`<select id=\"cb_cf_programmers\"> </select>`\r\n\r\nA selection of supported programmers.\r\n\r\n`<button id=\"cb_cf_flash_with_prog_btn\"></button>`\r\n\r\nButton that compiles the code, and then uploads the binary to your board using the selected programmer of “cb_cf_programmers”\r\n\r\n`<select id=\"cb_cf_baud_rates\"></select>`\r\n\r\nSelection of supported Baud Rates for connection to the Serial Monitor.\r\n\r\n`<button id=\"cb_cf_serial_monitor_connect\"></button>`\r\n\r\nButton that connects to the selected port of “cb_cf_ports” on the selected speed of “cb_cf_baud_rates”, and opens up the serial monitor included in “cb_cf_serial_monitor” .\r\n\r\n`<div id=\"cb_cf_serial_monitor\"></div>`\r\n\r\nDiv that includes the serial monitor itself, and a textbox and button to send serial data.\r\n\r\n`<p id=\"cb_cf_operation_output></p>`\r\n\r\nGeneric compilerflasher text output.\r\n\r\nAll those elements can be styled to your needs, using either custom stylesheets, or external plug-n-play frameworks like Bootstrap.\r\n\r\n## Javascript\r\n\r\nIn order to make use of all the loaded elements, you have to initialize the compilerflasher class. That can be done with the following line of code:\r\n### \r\n`compilerflasher = new compilerflasher(function);`\r\n\r\nFunction is a function that you have to implement, and returns the files you want to use for compilation & flashing, on the following format:\r\n\r\n`Object {sketch.ino: \"void setup()↵{↵ ↵}↵↵void loop()↵{↵ ↵}↵\", header.h: \"\"})`\r\n\r\nThis function is called whenever the files need to be fetched (i.e. before Verification), so you could either return static data, if you want your page to operate like so, or use a function that returns different files every time. \r\n\r\nBy adding this line of code, button click events are going to be binded with the proper functions automatically.\r\n\r\n## Events\r\n\r\nCompilerflasher.js supports a set of events that can be hooked by your app. Callbacks for each event can be added likeso:\r\n\r\n`compilerflasher.on(eventName, callback);`\r\n\r\nWhere eventName is a string included on the list mentioned later, and callback is a function that may, or may not have parameters depending on the event.\r\n\r\n## Available Events\r\n\r\n### \"pre_verify\"\r\n\r\nUsage:  `compilerflasher.on(“pre_verify”, function(){/*your code here*/});`\r\n\r\nGets fired before the verification process, when user clicks on the “cb_cf_verify_btn” button.\r\nCallback of this event takes no parameters.\r\n\r\n### \"verification_succeed\"\r\n\r\nUsage: `compilerflasher.on(“verification_succeed”, function(binary_size){/*your code here*/});`\r\n\r\nGets fired upon successful verification. Callback function can take one parameter, which is the compiled binary size in bytes.\r\n\r\n### “verification_failed”\r\n\r\nUsage: `compilerflasher.on(“verification_failed”, function(error_output){/*your code here*/});`\r\n\r\nGets fired upon failed verification. Callback function can take one parameter, which is the compiler’s error output.\r\n\r\n### \"pre_flash\"\r\n\r\nUsage: `compilerflasher.on(“pre_flash”, function(){/*your code here*/});`\r\n\r\nGets fired before the flashing process, either when user clicks on the “cb_cf_flash_btn” button, or when user clicks on the “cb_cf_flash_with_prog_btn” button.\r\nCallback of this event takes no parameters.\r\n\r\n### \"mid_flash\"\r\n\r\nUsage: `compilerflasher.on(“mid_flash”, function(size){/*your code here*/});`\r\n\r\nGets fired in the middle of the flashing process, after the successful compilation of the sketch.\r\nCallback function can take one parameter, which is the compiled binary size in bytes.\r\n\r\n\r\n### \"flash_failed\"\r\n\r\nUsage: `compilerflasher.on(“flash_failed”, function(message){/*your code here*/});`\r\n\r\nGets fired when the flashing proccess fails. Callback can take one parameter, which is the error message.\r\n\r\n### \"flash_succeed\"\r\n\r\nUsage: `compilerflasher.on(“flash_succeed”, function(message){/*your code here*/});`\r\n\r\nGets fired when the flashing proccess fails. Takes no parameters.\r\n\r\n### \"plugin_notification\"\r\n\r\nUsage: `compilerflasher.on(“plugin_notification”, function(message){/*your code here*/});`\r\n\r\nFired to give your app a generic notification created by our browser plugin. Callback can take one parameter, which is the notification.\r\n\r\n### \"plugin_running\"\r\n\r\nUsage: `compilerflasher.on(“plugin_running”, function(){{/*your code here*/});`\r\n\r\nFired when plugin has finished initializing, and started running without any issues.\r\n\r\n\t","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}